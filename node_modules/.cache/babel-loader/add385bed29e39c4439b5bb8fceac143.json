{"ast":null,"code":"var _jsxFileName = \"/Users/staschekhov/Desktop/React /HW7/contacts_phonebook/src/components/Phonebook.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // import PropTypes from \"prop-types\";\n\nimport s from \"./Phonebook.module.css\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport { useAddContactMutation, useGetContactsQuery } from \"redux/contactsApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Phonebook() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const {\n    data = [],\n    error,\n    isLoading,\n    refetch\n  } = useGetContactsQuery();\n  const [addContact, result] = useAddContactMutation(); //  const contacts = useSelector((state) => state.myValue.contacts.items);\n  //  const onChange = (e) => {\n  //   const { name, value } = e.currentTarget;\n  //   // eslint-disable-next-line default-case\n  //   switch (name) {\n  //    case \"name\":\n  //     setName(value);\n  //     break;\n  //    case \"number\":\n  //     setNumber(value);\n  //     break;\n  //   }\n  //  };\n\n  const onSaveContact = async () => {\n    const contact = {\n      name,\n      number\n    };\n\n    if (data.find(item => item.name.toLowerCase() === contact.name.toLowerCase())) {\n      return alert(`Contact ${name} already exists`);\n    }\n\n    await addContact({\n      id: nanoid(),\n      name,\n      number\n    });\n    refetch();\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSaveContact();\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.div,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: s.label,\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: s.input,\n          id: nanoid(),\n          type: \"text\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          name: \"name\",\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"\\u0418\\u043C\\u044F \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u0442\\u044C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u0438\\u0437 \\u0431\\u0443\\u043A\\u0432, \\u0430\\u043F\\u043E\\u0441\\u0442\\u0440\\u043E\\u0444\\u0430, \\u0442\\u0438\\u0440\\u0435 \\u0438 \\u043F\\u0440\\u043E\\u0431\\u0435\\u043B\\u043E\\u0432. \\u041D\\u0430\\u043F\\u0440\\u0438\\u043C\\u0435\\u0440 Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \\u0438 \\u0442. \\u043F.\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: s.label,\n          children: \"Phone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: s.input,\n          type: \"tel\",\n          value: number,\n          onChange: e => setNumber(e.target.value),\n          name: \"number\",\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430 \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u0442\\u044C \\u0446\\u0438\\u0444\\u0440 \\u0438 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u043F\\u0440\\u043E\\u0431\\u0435\\u043B\\u044B, \\u0442\\u0438\\u0440\\u0435, \\u043A\\u0440\\u0443\\u0433\\u043B\\u044B\\u0435 \\u0441\\u043A\\u043E\\u0431\\u043A\\u0438 \\u0438 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u043D\\u0430\\u0447\\u0438\\u043D\\u0430\\u0442\\u044C\\u0441\\u044F \\u0441 +\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: s.button,\n          children: \"Add contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n} // Phonebook.propTypes = {\n//  onAddContact: PropTypes.func.isRequired,\n// };\n\n_s(Phonebook, \"O6dOcdDoBhko6rLJD6KEC7eHbhg=\", false, function () {\n  return [useDispatch, useGetContactsQuery, useAddContactMutation];\n});\n\n_c = Phonebook;\n\nvar _c;\n\n$RefreshReg$(_c, \"Phonebook\");","map":{"version":3,"sources":["/Users/staschekhov/Desktop/React /HW7/contacts_phonebook/src/components/Phonebook.jsx"],"names":["React","useState","s","nanoid","useDispatch","useAddContactMutation","useGetContactsQuery","Phonebook","dispatch","name","setName","number","setNumber","data","error","isLoading","refetch","addContact","result","onSaveContact","contact","find","item","toLowerCase","alert","id","handleSubmit","e","preventDefault","div","label","input","target","value","button"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n// import PropTypes from \"prop-types\";\nimport s from \"./Phonebook.module.css\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport { useAddContactMutation, useGetContactsQuery } from \"redux/contactsApi\";\n\nexport default function Phonebook() {\n const dispatch = useDispatch();\n\n const [name, setName] = useState(\"\");\n const [number, setNumber] = useState(\"\");\n\n const { data = [], error, isLoading, refetch } = useGetContactsQuery();\n const [addContact, result] = useAddContactMutation();\n //  const contacts = useSelector((state) => state.myValue.contacts.items);\n\n //  const onChange = (e) => {\n //   const { name, value } = e.currentTarget;\n //   // eslint-disable-next-line default-case\n //   switch (name) {\n //    case \"name\":\n //     setName(value);\n //     break;\n //    case \"number\":\n //     setNumber(value);\n //     break;\n //   }\n //  };\n\n const onSaveContact = async () => {\n  const contact = {\n   name,\n   number,\n  };\n\n  if (\n   data.find((item) => item.name.toLowerCase() === contact.name.toLowerCase())\n  ) {\n   return alert(`Contact ${name} already exists`);\n  }\n  await addContact({ id: nanoid(), name, number });\n  refetch();\n };\n\n const handleSubmit = (e) => {\n  e.preventDefault();\n  onSaveContact();\n  setName(\"\");\n  setNumber(\"\");\n };\n\n return (\n  <>\n   <form onSubmit={handleSubmit}>\n    <div className={s.div}>\n     <label className={s.label}>Name</label>\n     <input\n      className={s.input}\n      id={nanoid()}\n      type=\"text\"\n      value={name}\n      onChange={(e) => setName(e.target.value)}\n      name=\"name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n     />\n     <label className={s.label}>Phone</label>\n     <input\n      className={s.input}\n      type=\"tel\"\n      value={number}\n      onChange={(e) => setNumber(e.target.value)}\n      name=\"number\"\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n      title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n      required\n     />\n     <button type=\"submit\" className={s.button}>\n      Add contact\n     </button>\n    </div>\n   </form>\n  </>\n );\n}\n\n// Phonebook.propTypes = {\n//  onAddContact: PropTypes.func.isRequired,\n// };\n"]},"metadata":{},"sourceType":"module"}