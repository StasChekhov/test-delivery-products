{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const clickSlice = createSlice({\n  name: \"filter\",\n  initialState: {\n    filter: \"\"\n  },\n  reducers: {\n    //   add(state, action) {\n    //    state.contacts.items.push(action.payload);\n    //   },\n    //   remove(state, action) {\n    //    //    state.contacts.items.splice(0, action.payload);\n    //    state.contacts.items = state.contacts.items.filter(\n    //     (element) => element.id !== action.payload.id\n    //    );\n    //   },\n    filterContacts(state, action) {\n      state.filter = action.payload.text;\n    }\n\n  }\n}); // export const { add } = clickSlice.actions;\n// export const { remove } = clickSlice.actions;\n\nexport const {\n  filterContacts\n} = clickSlice.actions; //Selectors\n// export const getContacts = (state) => state.myValue.contacts.items;\n\nexport const getFilter = state => state.filter.filter;","map":{"version":3,"sources":["/Users/staschekhov/Desktop/React /HW7/contacts_phonebook/src/redux/clickSlice.js"],"names":["createSlice","clickSlice","name","initialState","filter","reducers","filterContacts","state","action","payload","text","actions","getFilter"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;AACrCE,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,YAAY,EAAE;AACbC,IAAAA,MAAM,EAAE;AADK,GAFuB;AAKrCC,EAAAA,QAAQ,EAAE;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC7BD,MAAAA,KAAK,CAACH,MAAN,GAAeI,MAAM,CAACC,OAAP,CAAeC,IAA9B;AACA;;AAZQ;AAL2B,CAAD,CAA9B,C,CAoBP;AACA;;AACA,OAAO,MAAM;AAAEJ,EAAAA;AAAF,IAAqBL,UAAU,CAACU,OAAtC,C,CAEP;AACA;;AACA,OAAO,MAAMC,SAAS,GAAIL,KAAD,IAAWA,KAAK,CAACH,MAAN,CAAaA,MAA1C","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const clickSlice = createSlice({\n name: \"filter\",\n initialState: {\n  filter: \"\",\n },\n reducers: {\n  //   add(state, action) {\n  //    state.contacts.items.push(action.payload);\n  //   },\n  //   remove(state, action) {\n  //    //    state.contacts.items.splice(0, action.payload);\n  //    state.contacts.items = state.contacts.items.filter(\n  //     (element) => element.id !== action.payload.id\n  //    );\n  //   },\n  filterContacts(state, action) {\n   state.filter = action.payload.text;\n  },\n },\n});\n// export const { add } = clickSlice.actions;\n// export const { remove } = clickSlice.actions;\nexport const { filterContacts } = clickSlice.actions;\n\n//Selectors\n// export const getContacts = (state) => state.myValue.contacts.items;\nexport const getFilter = (state) => state.filter.filter;\n"]},"metadata":{},"sourceType":"module"}