{"ast":null,"code":"import _asyncToGenerator from\"/Users/staschekhov/Desktop/React /HW7/contacts_phonebook/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/staschekhov/Desktop/React /HW7/contacts_phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/staschekhov/Desktop/React /HW7/contacts_phonebook/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState}from\"react\";// import PropTypes from \"prop-types\";\nimport s from\"./Phonebook.module.css\";import{nanoid}from\"@reduxjs/toolkit\";import{useDispatch}from\"react-redux\";import{useAddContactMutation,useGetContactsQuery}from\"redux/contactsApi\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function Phonebook(){var dispatch=useDispatch();var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),number=_useState4[0],setNumber=_useState4[1];var _useGetContactsQuery=useGetContactsQuery(),_useGetContactsQuery$=_useGetContactsQuery.data,data=_useGetContactsQuery$===void 0?[]:_useGetContactsQuery$,error=_useGetContactsQuery.error,isLoading=_useGetContactsQuery.isLoading,refetch=_useGetContactsQuery.refetch;var _useAddContactMutatio=useAddContactMutation(),_useAddContactMutatio2=_slicedToArray(_useAddContactMutatio,2),addContact=_useAddContactMutatio2[0],result=_useAddContactMutatio2[1];var onSaveContact=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var contact;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:contact={name:name,number:number};if(!data.find(function(item){return item.name.toLowerCase()===contact.name.toLowerCase();})){_context.next=3;break;}return _context.abrupt(\"return\",alert(\"Contact \".concat(name,\" already exists\")));case 3:_context.next=5;return addContact({id:nanoid(),name:name,number:number});case 5:case\"end\":return _context.stop();}}},_callee);}));return function onSaveContact(){return _ref.apply(this,arguments);};}();var handleSubmit=function handleSubmit(e){e.preventDefault();onSaveContact();setName(\"\");setNumber(\"\");};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,className:s.form,children:/*#__PURE__*/_jsxs(\"div\",{className:s.div,children:[/*#__PURE__*/_jsx(\"label\",{className:s.label,children:\"Name\"}),/*#__PURE__*/_jsx(\"input\",{className:s.input,id:nanoid(),type:\"text\",value:name,onChange:function onChange(e){return setName(e.target.value);},name:\"name\",pattern:\"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",title:\"\\u0418\\u043C\\u044F \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u0442\\u044C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u0438\\u0437 \\u0431\\u0443\\u043A\\u0432, \\u0430\\u043F\\u043E\\u0441\\u0442\\u0440\\u043E\\u0444\\u0430, \\u0442\\u0438\\u0440\\u0435 \\u0438 \\u043F\\u0440\\u043E\\u0431\\u0435\\u043B\\u043E\\u0432. \\u041D\\u0430\\u043F\\u0440\\u0438\\u043C\\u0435\\u0440 Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \\u0438 \\u0442. \\u043F.\",required:true,placeholder:\"Ivan Dudka\"}),/*#__PURE__*/_jsx(\"label\",{className:s.label,children:\"Phone\"}),/*#__PURE__*/_jsx(\"input\",{className:s.input,type:\"tel\",value:number,onChange:function onChange(e){return setNumber(e.target.value);},name:\"number\",pattern:\"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",title:\"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430 \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u0442\\u044C \\u0446\\u0438\\u0444\\u0440 \\u0438 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u043F\\u0440\\u043E\\u0431\\u0435\\u043B\\u044B, \\u0442\\u0438\\u0440\\u0435, \\u043A\\u0440\\u0443\\u0433\\u043B\\u044B\\u0435 \\u0441\\u043A\\u043E\\u0431\\u043A\\u0438 \\u0438 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u043D\\u0430\\u0447\\u0438\\u043D\\u0430\\u0442\\u044C\\u0441\\u044F \\u0441 +\",required:true,placeholder:\"+380\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:s.button,children:\"Add contact\"})]})})});}// Phonebook.propTypes = {\n//  onAddContact: PropTypes.func.isRequired,\n// };","map":{"version":3,"sources":["/Users/staschekhov/Desktop/React /HW7/contacts_phonebook/src/components/Phonebook.jsx"],"names":["React","useState","s","nanoid","useDispatch","useAddContactMutation","useGetContactsQuery","Phonebook","dispatch","name","setName","number","setNumber","data","error","isLoading","refetch","addContact","result","onSaveContact","contact","find","item","toLowerCase","alert","id","handleSubmit","e","preventDefault","form","div","label","input","target","value","button"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n// import PropTypes from \"prop-types\";\nimport s from \"./Phonebook.module.css\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport { useAddContactMutation, useGetContactsQuery } from \"redux/contactsApi\";\n\nexport default function Phonebook() {\n const dispatch = useDispatch();\n\n const [name, setName] = useState(\"\");\n const [number, setNumber] = useState(\"\");\n\n const { data = [], error, isLoading, refetch } = useGetContactsQuery();\n const [addContact, result] = useAddContactMutation();\n\n const onSaveContact = async () => {\n  const contact = {\n   name,\n   number,\n  };\n\n  if (\n   data.find((item) => item.name.toLowerCase() === contact.name.toLowerCase())\n  ) {\n   return alert(`Contact ${name} already exists`);\n  }\n  await addContact({ id: nanoid(), name, number });\n };\n\n const handleSubmit = (e) => {\n  e.preventDefault();\n  onSaveContact();\n  setName(\"\");\n  setNumber(\"\");\n };\n\n return (\n  <>\n   <form onSubmit={handleSubmit} className={s.form}>\n    <div className={s.div}>\n     <label className={s.label}>Name</label>\n     <input\n      className={s.input}\n      id={nanoid()}\n      type=\"text\"\n      value={name}\n      onChange={(e) => setName(e.target.value)}\n      name=\"name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n      placeholder=\"Ivan Dudka\"\n     />\n     <label className={s.label}>Phone</label>\n     <input\n      className={s.input}\n      type=\"tel\"\n      value={number}\n      onChange={(e) => setNumber(e.target.value)}\n      name=\"number\"\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n      title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n      required\n      placeholder=\"+380\"\n     />\n     <button type=\"submit\" className={s.button}>\n      Add contact\n     </button>\n    </div>\n   </form>\n  </>\n );\n}\n\n// Phonebook.propTypes = {\n//  onAddContact: PropTypes.func.isRequired,\n// };\n"]},"metadata":{},"sourceType":"module"}